{"ast":null,"code":"import React, { PureComponent } from 'react';\nimport { classNames } from '../../utilities/css.js';\nimport { getRectForNode, Rect } from '../../utilities/geometry.js';\nimport { dataPolarisTopBar, layer } from '../shared.js';\nimport { windowRect, calculateVerticalPosition, calculateHorizontalPosition, rectIsOutsideOfRect, intersectionWithViewport } from './utilities/math.js';\nimport styles from './PositionedOverlay.css.js';\nimport { Scrollable } from '../Scrollable/Scrollable.js';\nimport { EventListener } from '../EventListener/EventListener.js';\nconst OBSERVER_CONFIG = {\n  childList: true,\n  subtree: true,\n  characterData: true,\n  attributeFilter: ['style']\n};\nclass PositionedOverlay extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      measuring: true,\n      activatorRect: getRectForNode(this.props.activator),\n      right: undefined,\n      left: undefined,\n      top: 0,\n      height: 0,\n      width: null,\n      positioning: 'below',\n      zIndex: null,\n      outsideScrollableContainer: false,\n      lockPosition: false,\n      chevronOffset: 0\n    };\n    this.overlay = null;\n    this.scrollableContainers = [];\n    this.overlayDetails = () => {\n      const {\n        measuring,\n        left,\n        right,\n        positioning,\n        height,\n        activatorRect,\n        chevronOffset\n      } = this.state;\n      return {\n        measuring,\n        left,\n        right,\n        desiredHeight: height,\n        positioning,\n        activatorRect,\n        chevronOffset\n      };\n    };\n    this.setOverlay = node => {\n      this.overlay = node;\n    };\n    this.setScrollableContainers = () => {\n      const containers = [];\n      let scrollableContainer = Scrollable.forNode(this.props.activator);\n      if (scrollableContainer) {\n        containers.push(scrollableContainer);\n        while (scrollableContainer?.parentElement) {\n          scrollableContainer = Scrollable.forNode(scrollableContainer.parentElement);\n          containers.push(scrollableContainer);\n        }\n      }\n      this.scrollableContainers = containers;\n    };\n    this.registerScrollHandlers = () => {\n      this.scrollableContainers.forEach(node => {\n        node.addEventListener('scroll', this.handleMeasurement);\n      });\n    };\n    this.unregisterScrollHandlers = () => {\n      this.scrollableContainers.forEach(node => {\n        node.removeEventListener('scroll', this.handleMeasurement);\n      });\n    };\n    this.handleMeasurement = () => {\n      const {\n        lockPosition,\n        top\n      } = this.state;\n      this.observer.disconnect();\n      this.setState(({\n        left,\n        top,\n        right\n      }) => ({\n        left,\n        right,\n        top,\n        height: 0,\n        positioning: 'below',\n        measuring: true\n      }), () => {\n        if (this.overlay == null || this.firstScrollableContainer == null) {\n          return;\n        }\n        const {\n          activator,\n          preferredPosition = 'below',\n          preferredAlignment = 'center',\n          onScrollOut,\n          fullWidth,\n          fixed,\n          preferInputActivator = true\n        } = this.props;\n        const preferredActivator = preferInputActivator ? activator.querySelector('input') || activator : activator;\n        const activatorRect = getRectForNode(preferredActivator);\n        const currentOverlayRect = getRectForNode(this.overlay);\n        const scrollableElement = isDocument(this.firstScrollableContainer) ? document.body : this.firstScrollableContainer;\n        const scrollableContainerRect = getRectForNode(scrollableElement);\n        const overlayRect = fullWidth || preferredPosition === 'cover' ? new Rect({\n          ...currentOverlayRect,\n          width: activatorRect.width\n        }) : currentOverlayRect;\n\n        // If `body` is 100% height, it still acts as though it were not constrained to that size. This adjusts for that.\n        if (scrollableElement === document.body) {\n          scrollableContainerRect.height = document.body.scrollHeight;\n        }\n        let topBarOffset = 0;\n        const topBarElement = scrollableElement.querySelector(`${dataPolarisTopBar.selector}`);\n        if (topBarElement) {\n          topBarOffset = topBarElement.clientHeight;\n        }\n        const overlayMargins = this.overlay.firstElementChild && this.overlay.firstChild instanceof HTMLElement ? getMarginsForNode(this.overlay.firstElementChild) : {\n          activator: 0,\n          container: 0,\n          horizontal: 0\n        };\n        const containerRect = windowRect();\n        const zIndexForLayer = getZIndexForLayerFromNode(activator);\n        const zIndex = zIndexForLayer == null ? zIndexForLayer : zIndexForLayer + 1;\n        const verticalPosition = calculateVerticalPosition(activatorRect, overlayRect, overlayMargins, scrollableContainerRect, containerRect, preferredPosition, fixed, topBarOffset);\n        const horizontalPosition = calculateHorizontalPosition(activatorRect, overlayRect, containerRect, overlayMargins, preferredAlignment);\n        const chevronOffset = activatorRect.center.x - horizontalPosition + overlayMargins.horizontal * 2;\n        this.setState({\n          measuring: false,\n          activatorRect: getRectForNode(activator),\n          left: preferredAlignment !== 'right' ? horizontalPosition : undefined,\n          right: preferredAlignment === 'right' ? horizontalPosition : undefined,\n          top: lockPosition ? top : verticalPosition.top,\n          lockPosition: Boolean(fixed),\n          height: verticalPosition.height || 0,\n          width: fullWidth || preferredPosition === 'cover' ? overlayRect.width : null,\n          positioning: verticalPosition.positioning,\n          outsideScrollableContainer: onScrollOut != null && rectIsOutsideOfRect(activatorRect, intersectionWithViewport(scrollableContainerRect)),\n          zIndex,\n          chevronOffset\n        }, () => {\n          if (!this.overlay) return;\n          this.observer.observe(this.overlay, OBSERVER_CONFIG);\n          this.observer.observe(activator, OBSERVER_CONFIG);\n        });\n      });\n    };\n    this.observer = new MutationObserver(this.handleMeasurement);\n  }\n  componentDidMount() {\n    this.setScrollableContainers();\n    if (this.scrollableContainers.length && !this.props.fixed) {\n      this.registerScrollHandlers();\n    }\n    this.handleMeasurement();\n  }\n  componentWillUnmount() {\n    this.observer.disconnect();\n    if (this.scrollableContainers.length && !this.props.fixed) {\n      this.unregisterScrollHandlers();\n    }\n  }\n  componentDidUpdate() {\n    const {\n      outsideScrollableContainer,\n      top\n    } = this.state;\n    const {\n      onScrollOut,\n      active\n    } = this.props;\n    if (active && onScrollOut != null && top !== 0 && outsideScrollableContainer) {\n      onScrollOut();\n    }\n  }\n  render() {\n    const {\n      left,\n      right,\n      top,\n      zIndex,\n      width\n    } = this.state;\n    const {\n      render,\n      fixed,\n      preventInteraction,\n      classNames: propClassNames,\n      zIndexOverride\n    } = this.props;\n    const style = {\n      top: top == null || isNaN(top) ? undefined : top,\n      left: left == null || isNaN(left) ? undefined : left,\n      right: right == null || isNaN(right) ? undefined : right,\n      width: width == null || isNaN(width) ? undefined : width,\n      zIndex: zIndexOverride || zIndex || undefined\n    };\n    const className = classNames(styles.PositionedOverlay, fixed && styles.fixed, preventInteraction && styles.preventInteraction, propClassNames);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: className,\n      style: style,\n      ref: this.setOverlay\n    }, /*#__PURE__*/React.createElement(EventListener, {\n      event: \"resize\",\n      handler: this.handleMeasurement\n    }), render(this.overlayDetails()));\n  }\n  get firstScrollableContainer() {\n    return this.scrollableContainers[0] ?? null;\n  }\n  forceUpdatePosition() {\n    // Wait a single animation frame before re-measuring.\n    // Consumer's may also need to setup their own timers for\n    // triggering forceUpdatePosition() `children` use animation.\n    // Ideally, forceUpdatePosition() is fired at the end of a transition event.\n    requestAnimationFrame(this.handleMeasurement);\n  }\n}\nfunction getMarginsForNode(node) {\n  const nodeStyles = window.getComputedStyle(node);\n  return {\n    activator: parseFloat(nodeStyles.marginTop || '0'),\n    container: parseFloat(nodeStyles.marginBottom || '0'),\n    horizontal: parseFloat(nodeStyles.marginLeft || '0')\n  };\n}\nfunction getZIndexForLayerFromNode(node) {\n  const layerNode = node.closest(layer.selector) || document.body;\n  const zIndex = layerNode === document.body ? 'auto' : parseInt(window.getComputedStyle(layerNode).zIndex || '0', 10);\n  return zIndex === 'auto' || isNaN(zIndex) ? null : zIndex;\n}\nfunction isDocument(node) {\n  return node === document;\n}\nexport { PositionedOverlay };","map":{"version":3,"names":["React","PureComponent","classNames","getRectForNode","Rect","dataPolarisTopBar","layer","windowRect","calculateVerticalPosition","calculateHorizontalPosition","rectIsOutsideOfRect","intersectionWithViewport","styles","Scrollable","EventListener","OBSERVER_CONFIG","childList","subtree","characterData","attributeFilter","PositionedOverlay","constructor","props","state","measuring","activatorRect","activator","right","undefined","left","top","height","width","positioning","zIndex","outsideScrollableContainer","lockPosition","chevronOffset","overlay","scrollableContainers","overlayDetails","desiredHeight","setOverlay","node","setScrollableContainers","containers","scrollableContainer","forNode","push","parentElement","registerScrollHandlers","forEach","addEventListener","handleMeasurement","unregisterScrollHandlers","removeEventListener","observer","disconnect","setState","firstScrollableContainer","preferredPosition","preferredAlignment","onScrollOut","fullWidth","fixed","preferInputActivator","preferredActivator","querySelector","currentOverlayRect","scrollableElement","isDocument","document","body","scrollableContainerRect","overlayRect","scrollHeight","topBarOffset","topBarElement","selector","clientHeight","overlayMargins","firstElementChild","firstChild","HTMLElement","getMarginsForNode","container","horizontal","containerRect","zIndexForLayer","getZIndexForLayerFromNode","verticalPosition","horizontalPosition","center","x","Boolean","observe","MutationObserver","componentDidMount","length","componentWillUnmount","componentDidUpdate","active","render","preventInteraction","propClassNames","zIndexOverride","style","isNaN","className","createElement","ref","event","handler","forceUpdatePosition","requestAnimationFrame","nodeStyles","window","getComputedStyle","parseFloat","marginTop","marginBottom","marginLeft","layerNode","closest","parseInt"],"sources":["/Users/henryspringer/Henry Cursor Folder/revenue-ai-dashboard/node_modules/@shopify/polaris/build/esm/components/PositionedOverlay/PositionedOverlay.js"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport { classNames } from '../../utilities/css.js';\nimport { getRectForNode, Rect } from '../../utilities/geometry.js';\nimport { dataPolarisTopBar, layer } from '../shared.js';\nimport { windowRect, calculateVerticalPosition, calculateHorizontalPosition, rectIsOutsideOfRect, intersectionWithViewport } from './utilities/math.js';\nimport styles from './PositionedOverlay.css.js';\nimport { Scrollable } from '../Scrollable/Scrollable.js';\nimport { EventListener } from '../EventListener/EventListener.js';\n\nconst OBSERVER_CONFIG = {\n  childList: true,\n  subtree: true,\n  characterData: true,\n  attributeFilter: ['style']\n};\nclass PositionedOverlay extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      measuring: true,\n      activatorRect: getRectForNode(this.props.activator),\n      right: undefined,\n      left: undefined,\n      top: 0,\n      height: 0,\n      width: null,\n      positioning: 'below',\n      zIndex: null,\n      outsideScrollableContainer: false,\n      lockPosition: false,\n      chevronOffset: 0\n    };\n    this.overlay = null;\n    this.scrollableContainers = [];\n    this.overlayDetails = () => {\n      const {\n        measuring,\n        left,\n        right,\n        positioning,\n        height,\n        activatorRect,\n        chevronOffset\n      } = this.state;\n      return {\n        measuring,\n        left,\n        right,\n        desiredHeight: height,\n        positioning,\n        activatorRect,\n        chevronOffset\n      };\n    };\n    this.setOverlay = node => {\n      this.overlay = node;\n    };\n    this.setScrollableContainers = () => {\n      const containers = [];\n      let scrollableContainer = Scrollable.forNode(this.props.activator);\n      if (scrollableContainer) {\n        containers.push(scrollableContainer);\n        while (scrollableContainer?.parentElement) {\n          scrollableContainer = Scrollable.forNode(scrollableContainer.parentElement);\n          containers.push(scrollableContainer);\n        }\n      }\n      this.scrollableContainers = containers;\n    };\n    this.registerScrollHandlers = () => {\n      this.scrollableContainers.forEach(node => {\n        node.addEventListener('scroll', this.handleMeasurement);\n      });\n    };\n    this.unregisterScrollHandlers = () => {\n      this.scrollableContainers.forEach(node => {\n        node.removeEventListener('scroll', this.handleMeasurement);\n      });\n    };\n    this.handleMeasurement = () => {\n      const {\n        lockPosition,\n        top\n      } = this.state;\n      this.observer.disconnect();\n      this.setState(({\n        left,\n        top,\n        right\n      }) => ({\n        left,\n        right,\n        top,\n        height: 0,\n        positioning: 'below',\n        measuring: true\n      }), () => {\n        if (this.overlay == null || this.firstScrollableContainer == null) {\n          return;\n        }\n        const {\n          activator,\n          preferredPosition = 'below',\n          preferredAlignment = 'center',\n          onScrollOut,\n          fullWidth,\n          fixed,\n          preferInputActivator = true\n        } = this.props;\n        const preferredActivator = preferInputActivator ? activator.querySelector('input') || activator : activator;\n        const activatorRect = getRectForNode(preferredActivator);\n        const currentOverlayRect = getRectForNode(this.overlay);\n        const scrollableElement = isDocument(this.firstScrollableContainer) ? document.body : this.firstScrollableContainer;\n        const scrollableContainerRect = getRectForNode(scrollableElement);\n        const overlayRect = fullWidth || preferredPosition === 'cover' ? new Rect({\n          ...currentOverlayRect,\n          width: activatorRect.width\n        }) : currentOverlayRect;\n\n        // If `body` is 100% height, it still acts as though it were not constrained to that size. This adjusts for that.\n        if (scrollableElement === document.body) {\n          scrollableContainerRect.height = document.body.scrollHeight;\n        }\n        let topBarOffset = 0;\n        const topBarElement = scrollableElement.querySelector(`${dataPolarisTopBar.selector}`);\n        if (topBarElement) {\n          topBarOffset = topBarElement.clientHeight;\n        }\n        const overlayMargins = this.overlay.firstElementChild && this.overlay.firstChild instanceof HTMLElement ? getMarginsForNode(this.overlay.firstElementChild) : {\n          activator: 0,\n          container: 0,\n          horizontal: 0\n        };\n        const containerRect = windowRect();\n        const zIndexForLayer = getZIndexForLayerFromNode(activator);\n        const zIndex = zIndexForLayer == null ? zIndexForLayer : zIndexForLayer + 1;\n        const verticalPosition = calculateVerticalPosition(activatorRect, overlayRect, overlayMargins, scrollableContainerRect, containerRect, preferredPosition, fixed, topBarOffset);\n        const horizontalPosition = calculateHorizontalPosition(activatorRect, overlayRect, containerRect, overlayMargins, preferredAlignment);\n        const chevronOffset = activatorRect.center.x - horizontalPosition + overlayMargins.horizontal * 2;\n        this.setState({\n          measuring: false,\n          activatorRect: getRectForNode(activator),\n          left: preferredAlignment !== 'right' ? horizontalPosition : undefined,\n          right: preferredAlignment === 'right' ? horizontalPosition : undefined,\n          top: lockPosition ? top : verticalPosition.top,\n          lockPosition: Boolean(fixed),\n          height: verticalPosition.height || 0,\n          width: fullWidth || preferredPosition === 'cover' ? overlayRect.width : null,\n          positioning: verticalPosition.positioning,\n          outsideScrollableContainer: onScrollOut != null && rectIsOutsideOfRect(activatorRect, intersectionWithViewport(scrollableContainerRect)),\n          zIndex,\n          chevronOffset\n        }, () => {\n          if (!this.overlay) return;\n          this.observer.observe(this.overlay, OBSERVER_CONFIG);\n          this.observer.observe(activator, OBSERVER_CONFIG);\n        });\n      });\n    };\n    this.observer = new MutationObserver(this.handleMeasurement);\n  }\n  componentDidMount() {\n    this.setScrollableContainers();\n    if (this.scrollableContainers.length && !this.props.fixed) {\n      this.registerScrollHandlers();\n    }\n    this.handleMeasurement();\n  }\n  componentWillUnmount() {\n    this.observer.disconnect();\n    if (this.scrollableContainers.length && !this.props.fixed) {\n      this.unregisterScrollHandlers();\n    }\n  }\n  componentDidUpdate() {\n    const {\n      outsideScrollableContainer,\n      top\n    } = this.state;\n    const {\n      onScrollOut,\n      active\n    } = this.props;\n    if (active && onScrollOut != null && top !== 0 && outsideScrollableContainer) {\n      onScrollOut();\n    }\n  }\n  render() {\n    const {\n      left,\n      right,\n      top,\n      zIndex,\n      width\n    } = this.state;\n    const {\n      render,\n      fixed,\n      preventInteraction,\n      classNames: propClassNames,\n      zIndexOverride\n    } = this.props;\n    const style = {\n      top: top == null || isNaN(top) ? undefined : top,\n      left: left == null || isNaN(left) ? undefined : left,\n      right: right == null || isNaN(right) ? undefined : right,\n      width: width == null || isNaN(width) ? undefined : width,\n      zIndex: zIndexOverride || zIndex || undefined\n    };\n    const className = classNames(styles.PositionedOverlay, fixed && styles.fixed, preventInteraction && styles.preventInteraction, propClassNames);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: className,\n      style: style,\n      ref: this.setOverlay\n    }, /*#__PURE__*/React.createElement(EventListener, {\n      event: \"resize\",\n      handler: this.handleMeasurement\n    }), render(this.overlayDetails()));\n  }\n  get firstScrollableContainer() {\n    return this.scrollableContainers[0] ?? null;\n  }\n  forceUpdatePosition() {\n    // Wait a single animation frame before re-measuring.\n    // Consumer's may also need to setup their own timers for\n    // triggering forceUpdatePosition() `children` use animation.\n    // Ideally, forceUpdatePosition() is fired at the end of a transition event.\n    requestAnimationFrame(this.handleMeasurement);\n  }\n}\nfunction getMarginsForNode(node) {\n  const nodeStyles = window.getComputedStyle(node);\n  return {\n    activator: parseFloat(nodeStyles.marginTop || '0'),\n    container: parseFloat(nodeStyles.marginBottom || '0'),\n    horizontal: parseFloat(nodeStyles.marginLeft || '0')\n  };\n}\nfunction getZIndexForLayerFromNode(node) {\n  const layerNode = node.closest(layer.selector) || document.body;\n  const zIndex = layerNode === document.body ? 'auto' : parseInt(window.getComputedStyle(layerNode).zIndex || '0', 10);\n  return zIndex === 'auto' || isNaN(zIndex) ? null : zIndex;\n}\nfunction isDocument(node) {\n  return node === document;\n}\n\nexport { PositionedOverlay };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { useState } from 'react';\nimport { themeDefault, getMediaConditions } from '@shopify/polaris-tokens';\nimport { isServer } from './target.js';\nimport { useIsomorphicLayoutEffect } from './use-isomorphic-layout-effect.js';\nconst Breakpoints = {\n  // TODO: Update to smDown\n  navigationBarCollapsed: '767.95px',\n  // TODO: Update to lgDown\n  stackedContent: '1039.95px'\n};\nconst noWindowMatches = {\n  media: '',\n  addListener: noop,\n  removeListener: noop,\n  matches: false,\n  onchange: noop,\n  addEventListener: noop,\n  removeEventListener: noop,\n  dispatchEvent: _ => true\n};\nfunction noop() {}\nfunction navigationBarCollapsed() {\n  return typeof window === 'undefined' ? noWindowMatches : window.matchMedia(`(max-width: ${Breakpoints.navigationBarCollapsed})`);\n}\nfunction stackedContent() {\n  return typeof window === 'undefined' ? noWindowMatches : window.matchMedia(`(max-width: ${Breakpoints.stackedContent})`);\n}\n\n/**\n * Directional alias for each Polaris `breakpoints` token.\n *\n * @example 'smUp' | 'smDown' | 'smOnly' | 'mdUp' | etc.\n */\n\n/**\n * Match results for each directional Polaris `breakpoints` alias.\n */\n\nconst breakpointsQueryEntries = getBreakpointsQueryEntries(themeDefault.breakpoints);\nfunction getMatches(defaults,\n/**\n * Used to force defaults on initial client side render so they match SSR\n * values and hence avoid a Hydration error.\n */\nforceDefaults) {\n  if (!isServer && !forceDefaults) {\n    return Object.fromEntries(breakpointsQueryEntries.map(_ref => {\n      let [directionAlias, query] = _ref;\n      return [directionAlias, window.matchMedia(query).matches];\n    }));\n  }\n  if (typeof defaults === 'object' && defaults !== null) {\n    return Object.fromEntries(breakpointsQueryEntries.map(_ref2 => {\n      let [directionAlias] = _ref2;\n      return [directionAlias, defaults[directionAlias] ?? false];\n    }));\n  }\n  return Object.fromEntries(breakpointsQueryEntries.map(_ref3 => {\n    let [directionAlias] = _ref3;\n    return [directionAlias, defaults ?? false];\n  }));\n}\n/**\n * Retrieves media query matches for each directional Polaris `breakpoints` alias.\n *\n * @example\n * const {smUp} = useBreakpoints();\n * return smUp && 'Hello world';\n *\n * @example\n * const {mdUp} = useBreakpoints({defaults: {mdUp: true}});\n * mdUp //=> `true` during SSR\n *\n * @example\n * const breakpoints = useBreakpoints({defaults: true});\n * breakpoints //=> All values will be `true` during SSR\n */\nfunction useBreakpoints(options) {\n  // On SSR, and initial CSR, we force usage of the defaults to avoid a\n  // hydration mismatch error.\n  // Later, in the effect, we will call this again on the client side without\n  // any defaults to trigger a more accurate client side evaluation.\n  const [breakpoints, setBreakpoints] = useState(getMatches(options?.defaults, true));\n  useIsomorphicLayoutEffect(() => {\n    const mediaQueryLists = breakpointsQueryEntries.map(_ref4 => {\n      let [_, query] = _ref4;\n      return window.matchMedia(query);\n    });\n    const handler = () => setBreakpoints(getMatches());\n    mediaQueryLists.forEach(mql => {\n      if (mql.addListener) {\n        mql.addListener(handler);\n      } else {\n        mql.addEventListener('change', handler);\n      }\n    });\n\n    // Trigger the breakpoint recalculation at least once client-side to ensure\n    // we don't have stale default values from SSR.\n    handler();\n    return () => {\n      mediaQueryLists.forEach(mql => {\n        if (mql.removeListener) {\n          mql.removeListener(handler);\n        } else {\n          mql.removeEventListener('change', handler);\n        }\n      });\n    };\n  }, []);\n  return breakpoints;\n}\n\n/**\n * Converts `breakpoints` tokens into directional media query entries.\n *\n * @example\n * const breakpointsQueryEntries = getBreakpointsQueryEntries(breakpoints);\n * breakpointsQueryEntries === [\n *   ['xsUp', '(min-width: ...)'],\n *   ['xsDown', '(max-width: ...)'],\n *   ['xsOnly', '(min-width: ...) and (max-width: ...)'],\n *   ['smUp', '(min-width: ...) and (max-width: ...)'],\n *   ['mdUp', '(min-width: ...) and (max-width: ...)'],\n *   // etc.\n * ]\n */\nfunction getBreakpointsQueryEntries(breakpoints) {\n  const mediaConditionEntries = Object.entries(getMediaConditions(breakpoints));\n  return mediaConditionEntries.map(_ref5 => {\n    let [breakpointsToken, mediaConditions] = _ref5;\n    return Object.entries(mediaConditions).map(_ref6 => {\n      let [direction, mediaCondition] = _ref6;\n      const breakpointsAlias = breakpointsToken.split('-')[1];\n\n      // e.g. smUp, smDown, smOnly, etc.\n      const directionAlias = `${breakpointsAlias}${capitalize(direction)}`;\n      return [directionAlias, mediaCondition];\n    });\n  }).flat();\n}\nfunction capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\nexport { getBreakpointsQueryEntries, navigationBarCollapsed, stackedContent, useBreakpoints };","map":{"version":3,"names":["useState","themeDefault","getMediaConditions","isServer","useIsomorphicLayoutEffect","Breakpoints","navigationBarCollapsed","stackedContent","noWindowMatches","media","addListener","noop","removeListener","matches","onchange","addEventListener","removeEventListener","dispatchEvent","_","window","matchMedia","breakpointsQueryEntries","getBreakpointsQueryEntries","breakpoints","getMatches","defaults","forceDefaults","Object","fromEntries","map","_ref","directionAlias","query","_ref2","_ref3","useBreakpoints","options","setBreakpoints","mediaQueryLists","_ref4","handler","forEach","mql","mediaConditionEntries","entries","_ref5","breakpointsToken","mediaConditions","_ref6","direction","mediaCondition","breakpointsAlias","split","capitalize","flat","str","charAt","toUpperCase","slice"],"sources":["/Users/henryspringer/Henry Cursor Folder/revenue-ai-first-hiring/node_modules/@shopify/polaris/build/esm/utilities/breakpoints.js"],"sourcesContent":["import { useState } from 'react';\nimport { themeDefault, getMediaConditions } from '@shopify/polaris-tokens';\nimport { isServer } from './target.js';\nimport { useIsomorphicLayoutEffect } from './use-isomorphic-layout-effect.js';\n\nconst Breakpoints = {\n  // TODO: Update to smDown\n  navigationBarCollapsed: '767.95px',\n  // TODO: Update to lgDown\n  stackedContent: '1039.95px'\n};\nconst noWindowMatches = {\n  media: '',\n  addListener: noop,\n  removeListener: noop,\n  matches: false,\n  onchange: noop,\n  addEventListener: noop,\n  removeEventListener: noop,\n  dispatchEvent: _ => true\n};\nfunction noop() {}\nfunction navigationBarCollapsed() {\n  return typeof window === 'undefined' ? noWindowMatches : window.matchMedia(`(max-width: ${Breakpoints.navigationBarCollapsed})`);\n}\nfunction stackedContent() {\n  return typeof window === 'undefined' ? noWindowMatches : window.matchMedia(`(max-width: ${Breakpoints.stackedContent})`);\n}\n\n/**\n * Directional alias for each Polaris `breakpoints` token.\n *\n * @example 'smUp' | 'smDown' | 'smOnly' | 'mdUp' | etc.\n */\n\n/**\n * Match results for each directional Polaris `breakpoints` alias.\n */\n\nconst breakpointsQueryEntries = getBreakpointsQueryEntries(themeDefault.breakpoints);\nfunction getMatches(defaults,\n/**\n * Used to force defaults on initial client side render so they match SSR\n * values and hence avoid a Hydration error.\n */\nforceDefaults) {\n  if (!isServer && !forceDefaults) {\n    return Object.fromEntries(breakpointsQueryEntries.map(([directionAlias, query]) => [directionAlias, window.matchMedia(query).matches]));\n  }\n  if (typeof defaults === 'object' && defaults !== null) {\n    return Object.fromEntries(breakpointsQueryEntries.map(([directionAlias]) => [directionAlias, defaults[directionAlias] ?? false]));\n  }\n  return Object.fromEntries(breakpointsQueryEntries.map(([directionAlias]) => [directionAlias, defaults ?? false]));\n}\n/**\n * Retrieves media query matches for each directional Polaris `breakpoints` alias.\n *\n * @example\n * const {smUp} = useBreakpoints();\n * return smUp && 'Hello world';\n *\n * @example\n * const {mdUp} = useBreakpoints({defaults: {mdUp: true}});\n * mdUp //=> `true` during SSR\n *\n * @example\n * const breakpoints = useBreakpoints({defaults: true});\n * breakpoints //=> All values will be `true` during SSR\n */\nfunction useBreakpoints(options) {\n  // On SSR, and initial CSR, we force usage of the defaults to avoid a\n  // hydration mismatch error.\n  // Later, in the effect, we will call this again on the client side without\n  // any defaults to trigger a more accurate client side evaluation.\n  const [breakpoints, setBreakpoints] = useState(getMatches(options?.defaults, true));\n  useIsomorphicLayoutEffect(() => {\n    const mediaQueryLists = breakpointsQueryEntries.map(([_, query]) => window.matchMedia(query));\n    const handler = () => setBreakpoints(getMatches());\n    mediaQueryLists.forEach(mql => {\n      if (mql.addListener) {\n        mql.addListener(handler);\n      } else {\n        mql.addEventListener('change', handler);\n      }\n    });\n\n    // Trigger the breakpoint recalculation at least once client-side to ensure\n    // we don't have stale default values from SSR.\n    handler();\n    return () => {\n      mediaQueryLists.forEach(mql => {\n        if (mql.removeListener) {\n          mql.removeListener(handler);\n        } else {\n          mql.removeEventListener('change', handler);\n        }\n      });\n    };\n  }, []);\n  return breakpoints;\n}\n\n/**\n * Converts `breakpoints` tokens into directional media query entries.\n *\n * @example\n * const breakpointsQueryEntries = getBreakpointsQueryEntries(breakpoints);\n * breakpointsQueryEntries === [\n *   ['xsUp', '(min-width: ...)'],\n *   ['xsDown', '(max-width: ...)'],\n *   ['xsOnly', '(min-width: ...) and (max-width: ...)'],\n *   ['smUp', '(min-width: ...) and (max-width: ...)'],\n *   ['mdUp', '(min-width: ...) and (max-width: ...)'],\n *   // etc.\n * ]\n */\nfunction getBreakpointsQueryEntries(breakpoints) {\n  const mediaConditionEntries = Object.entries(getMediaConditions(breakpoints));\n  return mediaConditionEntries.map(([breakpointsToken, mediaConditions]) => Object.entries(mediaConditions).map(([direction, mediaCondition]) => {\n    const breakpointsAlias = breakpointsToken.split('-')[1];\n\n    // e.g. smUp, smDown, smOnly, etc.\n    const directionAlias = `${breakpointsAlias}${capitalize(direction)}`;\n    return [directionAlias, mediaCondition];\n  })).flat();\n}\nfunction capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nexport { getBreakpointsQueryEntries, navigationBarCollapsed, stackedContent, useBreakpoints };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}